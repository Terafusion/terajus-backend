<?php

namespace App\Services\ArtificialIntelligence;

use App\Models\Document\Document;
use App\Models\Evidence\Evidence;
use App\Models\LegalCase\LegalCase;
use App\Models\User\User;
use App\Repositories\User\UserRepository;
use App\Services\LegalCase\PromptService;
use App\Services\User\UserService;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Http;

class ArtificialIntelligenceService
{
    /** @var PromptService */
    private $promptService;

    public function __construct(PromptService $promptService)
    {
        $this->promptService = $promptService;
    }

    public function getComplaint(LegalCase $legalCase)
    {
        $prompt = $this->getPrompt($legalCase);
    }

    /**
     * Get complaint generated by IA
     */
    public function getPrompt(LegalCase $legalCase = null)
    {

        $legalCase = LegalCase::factory()->laborlawCase()->create();
        $evidence = Evidence::factory()->create(['legal_case_id' => $legalCase->id]);
        $evidence = Evidence::factory()->create(['legal_case_id' => $legalCase->id]);
        Document::factory()->create(['model_id' => $evidence->id]);
        return $this->promptService
            ->setCaseType($legalCase->case_type)
            ->setCaseMatter($legalCase->case_matter)
            ->setDescription($legalCase->case_description)
            ->setCourt($legalCase->court)
            ->setFieldsOfLaw($legalCase->fields_of_law)
            ->setEvidences($legalCase->evidences)
            ->build();
    }
}
