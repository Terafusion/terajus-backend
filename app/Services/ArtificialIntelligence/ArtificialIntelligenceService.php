<?php

namespace App\Services\ArtificialIntelligence;

use App\Models\Document\Document;
use App\Models\Evidence\Evidence;
use App\Models\LegalCase\LegalCase;
use App\Models\LegalCase\LegalCaseParticipant;
use App\Models\User\User;
use App\Services\LegalCase\PromptService;
use OpenAI;

class ArtificialIntelligenceService
{
    /** @var OpenAI\Client */
    private $client;

    /** @var PromptService */
    private $promptService;

    public function __construct(PromptService $promptService)
    {
        $this->client = OpenAI::client(getenv('OPENAI_API_KEY'));
        $this->promptService = $promptService;
    }

    public function getComplaint(LegalCase $legalCase = null)
    {
        $legalCase = LegalCase::factory()->laborlawCase()->create();
        $evidence = Evidence::factory()->create(['legal_case_id' => $legalCase->id]);
        $evidence = Evidence::factory()->create(['legal_case_id' => $legalCase->id]);
        Document::factory()->create(['model_id' => $evidence->id]);

        LegalCaseParticipant::factory()->plaintiff()->create(['legal_case_id' => $legalCase->id]);
        LegalCaseParticipant::factory()->defendant()->create(['legal_case_id' => $legalCase->id]);

        $prompt = $this->getPrompt($legalCase);
        $response = $this->client->chat()->create([
            'model' => 'gpt-3.5-turbo',
            'messages' => [
                [
                    'role' => 'user',
                    'content' => $prompt
                ],
            ],
        ]);

        $response->id; // 'chatcmpl-6pMyfj1HF4QXnfvjtfzvufZSQq6Eq'
        $response->object; // 'chat.completion'
        $response->created; // 1677701073
        $response->model; // 'gpt-3.5-turbo-0301'

        foreach ($response->choices as $result) {
            $result->index; // 0
            $result->message->role; // 'assistant'
            $result->message->content; // '\n\nHello there! How can I assist you today?'
            $result->finishReason; // 'stop'
        }

        $response->usage->promptTokens; // 9,
        $response->usage->completionTokens; // 12,
        $response->usage->totalTokens; // 21

        return json_encode($response->toArray());
    }

    /**
     * Get complaint generated by IA
     * 
     * @param LegalCase $legalCase
     * @return string
     */
    public function getPrompt(LegalCase $legalCase)
    {
        return $this->promptService
            ->setCaseType($legalCase->case_type)
            ->setCaseMatter($legalCase->case_matter)
            ->setPlaintiff($legalCase->plaintiff[0])
            ->setDefendant($legalCase->defendant[0])
            ->setDescription($legalCase->case_description)
            ->setCourt($legalCase->court)
            ->setFieldsOfLaw($legalCase->fields_of_law)
            ->setEvidences($legalCase->evidences)
            ->build();
    }
}
